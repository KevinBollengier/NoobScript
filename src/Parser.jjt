options{
  STATIC = false;
  JDK_VERSION = "1.5";
}
PARSER_BEGIN(Lexer)
    import java.util.List;
    import java.util.ArrayList;
    import java.io.FileNotFoundException;
	public class Lexer{
	    public static void main(String[] args)throws ParseException{
	        try{
                Lexer lexer = new Lexer(System.in);
                lexer.program();
                //SimpleNode root = lexer.program();
                //root.dump("");
	        }catch(Exception e){
	            System.out.println(e.getMessage());
	        }
	    }
		 /*public static void main(java.lang.String[] args) throws ParseException,TokenMgrError {
			Lexer lexer;
			System.out.println("Lexical analyser is now trying to read file..");
			if(args.length == 1){
			    System.out.println("Lexer is trying to read file: "+args[0]+"...");
			    try{
                    lexer = new Lexer(new java.io.FileInputStream(args[0]));
                    System.out.println("Starting to parse..");
                    for(Token token : tokenize(lexer)){
                        String name = LexerConstants.tokenImage[token.kind];
                        //String name = token.image;
                        System.out.println(token.beginLine +  ":" + name + "=>"+token.image);
                    }
                    System.out.println("Input was read.");
			    }catch(java.io.FileNotFoundException e){
                    System.out.println("Lexer: the file"+args[0]+"was not found..");
			        return;
			    }
			}
		}
		public static List<Token> tokenize (Lexer lexer) throws FileNotFoundException{
		    List<Token> tokens = new ArrayList<Token>();
		    Token token = lexer.getNextToken();
		    while(token.kind != LexerConstants.EOF){
		        tokens.add(token);
		        token = lexer.getNextToken();
		    }
		    return tokens;
		}*/
}PARSER_END(Lexer)

TOKEN:{

   <CONST: "const">{System.out.println("CONSTANT");}
  | <TRUE: "true">{System.out.println("TRUE");}
  | <FALSE: "false">{System.out.println("FALSE");}
  | <CONSTR:  "construct">{System.out.println("CONSTR");}
  | <THIS:  "this">{System.out.println("THIS");}
  | <FUNC: "function">{System.out.println("FUNCTION");}
  | <RETURN: "return">{System.out.println("RETURN");}
  | <READ: "read">{System.out.println("READ");}
  | <WRITE: "write">{System.out.println("WRITE");}
  | <CLASS: "class">{System.out.println("CLASS");}
  | <IF: "if">{System.out.println("IF");}
  | <THEN: "then">{System.out.println("THEN");}
  | <ELSE: "else">{System.out.println("ELSE");}
  | <WHILE: "asLongAs">{System.out.println("WHILE");}
  | <INT:(["0"-"9"])+>{System.out.println("INT");}
  | <ID: (["a"-"z","A"-"Z","0"-"9","_"])+ >{System.out.println("ID");}
  | <VARID:("$")(["a"-"z","A"-"Z","0"-"9","_"])+ >{System.out.println("VARID");}
  | <COMMA:([","])>{System.out.println("COMMA");}
  | <ADD:(["+"])>{System.out.println("ADD");}
  | <ADDASSIGN: (["+"]["="])>{System.out.println("ADDASSIGN");}
  | <SUBASSIGN: (["-"]["="])>{System.out.println("SUBASSIGN");}
  | <MULASSIGN: (["*"])(["="])>{System.out.println("MULASSIGN");}
  | <INC:(["+"]["+"])>{System.out.println("INC");}
  | <SUB:(["-"])>{System.out.println("SUB");}
  | <DEC:(["-"]["-"])>{System.out.println("DEC");}
  | <MUL:(["*"])>{System.out.println("MUL");}
  | <POW:(["*"]["*"])>{System.out.println("POW");}
  | <DIV:(["/"])>{System.out.println("DIV");}
  | <MOD:(["%"])>{System.out.println("MOD");}
  | <LCB:(["("])>{System.out.println("LCB");}
  | <RCB:([")"])>{System.out.println("RCB");}
  | <LBR:(["{"])>{System.out.println("LBR");}
  | <RBR:(["}"])>{System.out.println("RBR");}
  | <EQ:(["="])>{System.out.println("EQ");}
  | <NOT:(["!"])>{System.out.println("NOT");}
  | <NEQ:(["!"]["="])>{System.out.println("NEQ");}
  | <GT:([">"])>{System.out.println("GT");}
  | <LT:(["<"])>{System.out.println("LT");}
  | <GOE:([">"]["="])>{System.out.println("GOE");}
  | <LOE:(["<"]["="])>{System.out.println("LOE");}
  | <ARROW:(["-"][">"])>{System.out.println("ARROW");}
  | <COMPARISON:(["="]["="])>{System.out.println("COMPARISON");}
  | <AND:(["&"]["&"])>{System.out.println("AND");}
  | <OR:(["|"]["|"])>{System.out.println("OR");}
  | <SC:([";"])>{System.out.println("SC");}
  | <STRLIT: "\"" (~["\"", "\\"] | "\\\"" | "\\\\")* "\"" >{System.out.println("STRLIT");}
}

SKIP:{
  " "
  | "\t"
  | "\n"
  | "\r"
  |< "//" (~["\r", "\n"])* >
  |<"/*" (~["*"])* "*" (~["*","/"] (~["*"])* "*" | "*")* "/">
}

void program():{}
{
    (classDeclaration())*
     <EOF>
}
void classDeclaration():{}
{
    <CLASS>id()<LBR>declaration()<RBR>
}
void id():{Token t;}{
    <ID>
}
void declaration():{}
{
    ((varDeclaration()) | (funDeclaration()) | constructor())*
}
void varDeclaration():{}
{
    (constant())* ( varDeclarationList() ) <SC>
}
void constant():{}
{
    <CONST>
}
void varDeclarationList():{}
{
   <VARID>  (<EQ>)*  (<INT>|<TRUE>|<FALSE>|<VARID>|<STRLIT>)*
}
void funDeclaration():{}
{
    <FUNC><ID><LCB>params()<RCB><LBR>statement()<RBR>
}
void constructor():{}
{
    <CONSTR><LCB>params()<RCB><LBR>(constrStmt())*<RBR>
}
void constrStmt():{}
{
    <THIS><ARROW><VARID><EQ><VARID><SC>
}
void params():{}
{
    <VARID>
}
void statement():{}
{
  ( LOOKAHEAD(2) expressionStmt() | returnStmt() | iterationStmt() | ifStmt())*
}
void expressionStmt():{}
{
    expression()<SC>
}
void returnStmt():{}
{
    <RETURN><ID><SC>
}
void iterationStmt():{}
{
    <WHILE><LCB>expression()<RCB>statement()
}

void ifStmt():{}
{
    LOOKAHEAD(3)<IF><LCB>expression()<RCB> <THEN> statement() | <IF><LCB>expression()<RCB> <THEN> statement() [LOOKAHEAD(1) <ELSE> <THEN> statement()]
}
void expression():{}
{
      varDeclarationList()
    | LOOKAHEAD(3)(mutable() binaryop() expression())
    | LOOKAHEAD(3) (mutable() sumop() term())
    | LOOKAHEAD(3) (mutable() mulop() term())
    | LOOKAHEAD(3) (mutable() eqAssign() expression())
    | LOOKAHEAD(3) (incdec())
    | LOOKAHEAD(3) immutable()
    | LOOKAHEAD(3) io()
}
void mutable():{}
{
    <VARID> | <LCB>expression()<RCB>
}
void binaryop():{}{
    <LOE>
    | <LT>
    | <GT>
    | <GOE>
    | <COMPARISON>
    | <NEQ>
    | <NOT>
    | <OR>
    | <AND>
}
void sumop():{}
{
    <ADD> | <SUB>
}
void mulop():{}
{
      <MUL>
    | <DIV>
    | <MOD>
    | <POW>
}
void term():{}
{
    <VARID> | <INT> | <STRLIT>
}
void eqAssign():{}
{
      <ADDASSIGN> expression()
    | <SUBASSIGN> expression()
    | <MULASSIGN> expression()
}
void incdec():{}
{
    LOOKAHEAD(3)mutable()<INC> |LOOKAHEAD(3) mutable()<DEC>
}
void immutable():{}
{
    call() | <VARID>
}
void io():{}
{
    read() | write()
}
void read():{}
{
    <READ><LCB><RCB>
}
void write():{}
{
    <WRITE><LCB>params()<RCB>
}
void call():{}
{
    <ID><LCB>arguments()<RCB>
}
void arguments():{}
{
    (expression() | ((<COMMA>expression())*))
}