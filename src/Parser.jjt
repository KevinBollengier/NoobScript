options{
  STATIC = false;
  JDK_VERSION = "1.5";
  MULTI=true;
  NODE_PREFIX="";
}
PARSER_BEGIN(Parser)
    import java.util.List;
    import java.util.ArrayList;
    import java.io.FileNotFoundException;
	public class Parser{
	    public static void main(String[] args)throws ParseException{
	        try{
                Parser parser = new Parser(new java.io.FileInputStream(args[0]));
                //parser.program();
                SimpleNode root = parser.program();
                root.dump("");
	        }catch(Exception e){
	            System.out.println(e.getMessage());
	        }
	    }
		 /*public static void main(java.lang.String[] args) throws ParseException,TokenMgrError {
			Lexer lexer;
			System.out.println("Lexical analyser is now trying to read file..");
			if(args.length == 1){
			    System.out.println("Lexer is trying to read file: "+args[0]+"...");
			    try{
                    lexer = new Lexer(new java.io.FileInputStream(args[0]));
                    System.out.println("Starting to parse..");
                    for(Token token : tokenize(lexer)){
                        String name = LexerConstants.tokenImage[token.kind];
                        //String name = token.image;
                        System.out.println(token.beginLine +  ":" + name + "=>"+token.image);
                    }
                    System.out.println("Input was read.");
			    }catch(java.io.FileNotFoundException e){
                    System.out.println("Lexer: the file"+args[0]+"was not found..");
			        return;
			    }
			}
		}
		public static List<Token> tokenize (Lexer lexer) throws FileNotFoundException{
		    List<Token> tokens = new ArrayList<Token>();
		    Token token = lexer.getNextToken();
		    while(token.kind != LexerConstants.EOF){
		        tokens.add(token);
		        token = lexer.getNextToken();
		    }
		    return tokens;
		}*/
}PARSER_END(Parser)

TOKEN:{

   <CONST: "const">
  | <TRUE: "true">
  | <FALSE: "false">
  | <CONSTR:  "construct">
  | <THIS:  "this">
  | <FUNC: "function">
  | <RETURN: "return">
  | <READ: "read">
  | <WRITE: "write">
  | <CLASS: "class">
  | <IF: "if">
  | <THEN: "then">
  | <ELSE: "else">
  | <WHILE: "asLongAs">
  | <INT:(["0"-"9"])+>
  | <CLASSID:(["A"-"Z"])(["a"-"z","A"-"Z","0"-"9","_"])+>
  | <ID: (["a"-"z","A"-"Z","0"-"9","_"])+ >
  | <VARID:("$")(["a"-"z","A"-"Z","0"-"9","_"])+ >
  | <COMMA:([","])>
  | <ADD:(["+"])>
  | <SUB:(["-"])>
  | <MUL:(["*"])>
  | <POW:"**">
  | <DIV:(["/"])>
  | <MOD:(["%"])>
  | <LCB:(["("])>
  | <RCB:([")"])>
  | <LBR:(["{"])>
  | <RBR:(["}"])>
  | <EQ:(["="])>
  | <NOT:(["!"])>
  | <NEQ:"!=">
  | <GT:([">"])>
  | <LT:(["<"])>
  | <GOE:">=">
  | <LOE:"<=">
  | <ARROW:"->">
  | <COMPARISON:"==">
  | <AND:"&&">
  | <OR:"||">
  | <SC:([";"])>
  | <DOT:".">
  | <STRLIT: "\"" (~["\"", "\\"] | "\\\"" | "\\\\")* "\"" >
}

SKIP:{
  " "
  | "\t"
  | "\n"
  | "\r"
  |< "//" (~["\r", "\n"])* >
  |<"/*" (~["*"])* "*" (~["*","/"] (~["*"])* "*" | "*")* "/">
}

SimpleNode program()#program:{}
{
     (classDeclaration())*
     <EOF>
     {return jjtThis;}
}
void classDeclaration()#classDecl:{}
{
    <CLASS>classID()<LBR>declaration()<RBR>
}
void classID():{}
{
    <CLASSID>
}
void id():{Token t;}{
    <ID>
}
void declaration():{}
{
    ((varDeclaration()) | (funDeclaration()) | constructor())*
}
void varDeclaration():{}
{
    (constant())* ( varDeclarationList() ) <SC>
}
void constant():{}
{
    <CONST>
}
void varDeclarationList():{}
{
   <VARID>  (<EQ>)*  (LOOKAHEAD(2)(<INT>|<TRUE>|<FALSE>|<VARID>|<STRLIT>|read()))*
}
void funDeclaration():{}
{
    <FUNC><ID><LCB>(arguments())*<RCB>statement()
}
void constructor():{}
{
    <CONSTR><LCB>arguments()<RCB><LBR>(constrStmt())*<RBR>
}
void constrStmt():{}
{
    <THIS><ARROW><VARID><EQ><VARID><SC>
}
void statement():{}
{
  <LBR>( LOOKAHEAD(3) (expressionStmt() | returnStmt() | iterationStmt() | ifStmt()))*<RBR>
}
void expressionStmt():{}
{
    expression()<SC>
}
void returnStmt():{}
{
    <RETURN>(<VARID>|<ID>)<SC>
}
void iterationStmt():{}
{
    <WHILE><LCB>comparison()<RCB><THEN>statement()
}

void ifStmt():{}
{
    <IF><LCB>comparison()<RCB><THEN>statement()[LOOKAHEAD(1)<ELSE><THEN>statement()]
}
void comparison():{}
{
    value() [compoperators() value()]
}
void value():{}
{
    <VARID>|<INT>|<STRLIT>|<TRUE>|<FALSE>
}
void expression():{}
{
      LOOKAHEAD(2)  varDeclarationList()
    | LOOKAHEAD(2) functionCall()
    | LOOKAHEAD(2)  maths()
    | LOOKAHEAD(3) io()
}
void mutable():{}
{
    <VARID> | <LCB>expression()<RCB>
}
void maths():{}
{
    value() mathoperators() value()
}
void compoperators():{}
{
      <LOE>
    | <LT>
    | <GT>
    | <GOE>
    | <COMPARISON>
    | <NEQ>
    | <NOT>
    | <OR>
    | <AND>
}
void mathoperators():{}
{
     <ADD>
    |<SUB>
    |<MUL>
    |<DIV>
    |<MOD>
    |<POW>
}
void io():{}
{
    read() | write()
}
void read():{}
{
    <READ><LCB><RCB>
}
void write():{}
{
    <WRITE><LCB>arguments()<RCB>
}
void functionCall():{}
{
    <CLASSID><LCB>(arguments())*<RCB><DOT><ID><LCB>(arguments())*<RCB>
}
void arguments():{}
{
    (expression() ((<COMMA>expression())*))
}