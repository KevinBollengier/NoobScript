/* LexerTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. LexerTokenManager.java */
import java.util.List;
import java.util.ArrayList;
import java.io.FileNotFoundException;

/** Token Manager. */
@SuppressWarnings("unused")public class LexerTokenManager implements LexerConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x7ffeL) != 0L)
         {
            jjmatchedKind = 16;
            return 1;
         }
         return -1;
      case 1:
         if ((active0 & 0x800L) != 0L)
            return 1;
         if ((active0 & 0x77feL) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 1;
            return 1;
         }
         return -1;
      case 2:
         if ((active0 & 0x77feL) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 2;
            return 1;
         }
         return -1;
      case 3:
         if ((active0 & 0x46daL) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 3;
            return 1;
         }
         if ((active0 & 0x3124L) != 0L)
            return 1;
         return -1;
      case 4:
         if ((active0 & 0x40c0L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 16;
               jjmatchedPos = 4;
            }
            return 1;
         }
         if ((active0 & 0x61aL) != 0L)
            return 1;
         return -1;
      case 5:
         if ((active0 & 0x4050L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 5;
            return 1;
         }
         if ((active0 & 0x80L) != 0L)
            return 1;
         return -1;
      case 6:
         if ((active0 & 0x4050L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 6;
            return 1;
         }
         return -1;
      case 7:
         if ((active0 & 0x10L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 7;
            return 1;
         }
         if ((active0 & 0x4040L) != 0L)
            return 1;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa1_0(0x4000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x412L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x2000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x48L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x800L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x180L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x1024L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x200L);
      default :
         return jjMoveNfa_0(2, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x8L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x180L);
      case 102:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(1, 11, 1);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x1020L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x2400L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x12L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x204L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x40L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x500L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x220L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x8L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x52L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x80L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x40L);
      case 100:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 8, 1);
         break;
      case 101:
         if ((active0 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(3, 2, 1);
         else if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 13, 1);
         break;
      case 110:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 12, 1);
         break;
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L);
      case 115:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 5, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x41aL);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x200L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(4, 3, 1);
         else if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(4, 9, 1);
         break;
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x80L);
      case 115:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 10, 1);
         break;
      case 116:
         if ((active0 & 0x2L) != 0L)
         {
            jjmatchedKind = 1;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x50L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x40L);
      case 110:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 7, 1);
         break;
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x40L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x10L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x10L);
      case 110:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(7, 6, 1);
         break;
      case 115:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(7, 14, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 116:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(8, 4, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 49;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 16)
                        kind = 16;
                     { jjCheckNAdd(1); }
                  }
                  else if (curChar == 47)
                     { jjAddStates(0, 1); }
                  else if (curChar == 60)
                  {
                     if (kind > 38)
                        kind = 38;
                     jjstateSet[jjnewStateCnt++] = 39;
                  }
                  else if (curChar == 62)
                  {
                     if (kind > 37)
                        kind = 37;
                     jjstateSet[jjnewStateCnt++] = 37;
                  }
                  else if (curChar == 33)
                  {
                     if (kind > 35)
                        kind = 35;
                     jjstateSet[jjnewStateCnt++] = 35;
                  }
                  else if (curChar == 61)
                  {
                     if (kind > 34)
                        kind = 34;
                     jjstateSet[jjnewStateCnt++] = 33;
                  }
                  else if (curChar == 42)
                  {
                     if (kind > 26)
                        kind = 26;
                     { jjAddStates(2, 3); }
                  }
                  else if (curChar == 45)
                  {
                     if (kind > 24)
                        kind = 24;
                     { jjAddStates(4, 6); }
                  }
                  else if (curChar == 43)
                  {
                     if (kind > 19)
                        kind = 19;
                     { jjAddStates(7, 8); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(9, 11); }
                  else if (curChar == 59)
                  {
                     if (kind > 45)
                        kind = 45;
                  }
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 12;
                  else if (curChar == 41)
                  {
                     if (kind > 31)
                        kind = 31;
                  }
                  else if (curChar == 40)
                  {
                     if (kind > 30)
                        kind = 30;
                  }
                  else if (curChar == 37)
                  {
                     if (kind > 29)
                        kind = 29;
                  }
                  else if (curChar == 44)
                  {
                     if (kind > 18)
                        kind = 18;
                  }
                  else if (curChar == 36)
                     { jjCheckNAdd(3); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 15)
                        kind = 15;
                     { jjCheckNAdd(0); }
                  }
                  else if (curChar == 47)
                  {
                     if (kind > 28)
                        kind = 28;
                  }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  { jjCheckNAdd(0); }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  { jjCheckNAdd(1); }
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  { jjCheckNAdd(3); }
                  break;
               case 4:
                  if (curChar == 44 && kind > 18)
                     kind = 18;
                  break;
               case 5:
                  if (curChar == 47 && kind > 28)
                     kind = 28;
                  break;
               case 6:
                  if (curChar == 37 && kind > 29)
                     kind = 29;
                  break;
               case 7:
                  if (curChar == 40 && kind > 30)
                     kind = 30;
                  break;
               case 8:
                  if (curChar == 41 && kind > 31)
                     kind = 31;
                  break;
               case 11:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 12:
                  if (curChar == 38 && kind > 43)
                     kind = 43;
                  break;
               case 15:
                  if (curChar == 59 && kind > 45)
                     kind = 45;
                  break;
               case 16:
               case 20:
                  if (curChar == 34)
                     { jjCheckNAddStates(9, 11); }
                  break;
               case 17:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddStates(9, 11); }
                  break;
               case 18:
                  if (curChar == 34 && kind > 46)
                     kind = 46;
                  break;
               case 22:
                  if (curChar != 43)
                     break;
                  if (kind > 19)
                     kind = 19;
                  { jjAddStates(7, 8); }
                  break;
               case 23:
                  if (curChar == 61 && kind > 20)
                     kind = 20;
                  break;
               case 24:
                  if (curChar == 43 && kind > 23)
                     kind = 23;
                  break;
               case 25:
                  if (curChar != 45)
                     break;
                  if (kind > 24)
                     kind = 24;
                  { jjAddStates(4, 6); }
                  break;
               case 26:
                  if (curChar == 61 && kind > 21)
                     kind = 21;
                  break;
               case 27:
                  if (curChar == 45 && kind > 25)
                     kind = 25;
                  break;
               case 28:
                  if (curChar == 62 && kind > 41)
                     kind = 41;
                  break;
               case 29:
                  if (curChar != 42)
                     break;
                  if (kind > 26)
                     kind = 26;
                  { jjAddStates(2, 3); }
                  break;
               case 30:
                  if (curChar == 61 && kind > 22)
                     kind = 22;
                  break;
               case 31:
                  if (curChar == 42 && kind > 27)
                     kind = 27;
                  break;
               case 32:
                  if (curChar != 61)
                     break;
                  if (kind > 34)
                     kind = 34;
                  jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 33:
                  if (curChar == 61 && kind > 42)
                     kind = 42;
                  break;
               case 34:
                  if (curChar != 33)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 35:
                  if (curChar == 61 && kind > 36)
                     kind = 36;
                  break;
               case 36:
                  if (curChar != 62)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 37:
                  if (curChar == 61 && kind > 39)
                     kind = 39;
                  break;
               case 38:
                  if (curChar != 60)
                     break;
                  if (kind > 38)
                     kind = 38;
                  jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 39:
                  if (curChar == 61 && kind > 40)
                     kind = 40;
                  break;
               case 40:
                  if (curChar == 47)
                     { jjAddStates(0, 1); }
                  break;
               case 41:
                  if (curChar != 47)
                     break;
                  if (kind > 51)
                     kind = 51;
                  { jjCheckNAdd(42); }
                  break;
               case 42:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  { jjCheckNAdd(42); }
                  break;
               case 43:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(44, 45); }
                  break;
               case 44:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(44, 45); }
                  break;
               case 45:
                  if (curChar == 42)
                     { jjCheckNAddStates(12, 14); }
                  break;
               case 46:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(47, 45); }
                  break;
               case 47:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(47, 45); }
                  break;
               case 48:
                  if (curChar == 47 && kind > 52)
                     kind = 52;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 16)
                        kind = 16;
                     { jjCheckNAdd(1); }
                  }
                  else if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 14;
                  else if (curChar == 125)
                  {
                     if (kind > 33)
                        kind = 33;
                  }
                  else if (curChar == 123)
                  {
                     if (kind > 32)
                        kind = 32;
                  }
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  { jjCheckNAdd(1); }
                  break;
               case 3:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 9:
                  if (curChar == 123 && kind > 32)
                     kind = 32;
                  break;
               case 10:
                  if (curChar == 125 && kind > 33)
                     kind = 33;
                  break;
               case 13:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 14:
                  if (curChar == 124 && kind > 44)
                     kind = 44;
                  break;
               case 17:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(9, 11); }
                  break;
               case 19:
                  if (curChar == 92)
                     { jjAddStates(15, 16); }
                  break;
               case 21:
                  if (curChar == 92)
                     { jjCheckNAddStates(9, 11); }
                  break;
               case 42:
                  if (kind > 51)
                     kind = 51;
                  jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  { jjCheckNAddTwoStates(44, 45); }
                  break;
               case 46:
               case 47:
                  { jjCheckNAddTwoStates(47, 45); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 17:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(9, 11); }
                  break;
               case 42:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddTwoStates(44, 45); }
                  break;
               case 46:
               case 47:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddTwoStates(47, 45); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 49 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   41, 43, 30, 31, 26, 27, 28, 23, 24, 17, 18, 19, 46, 45, 48, 20, 
   21, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", "\143\157\156\163\164", "\164\162\165\145", "\146\141\154\163\145", 
"\143\157\156\163\164\162\165\143\164", "\164\150\151\163", "\146\165\156\143\164\151\157\156", 
"\162\145\164\165\162\156", "\162\145\141\144", "\167\162\151\164\145", "\143\154\141\163\163", 
"\151\146", "\164\150\145\156", "\145\154\163\145", "\141\163\114\157\156\147\101\163", 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         TokenLexicalActions(matchedToken);
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 1 :
        image.append(jjstrLiteralImages[1]);
        lengthOfMatch = jjstrLiteralImages[1].length();
                    System.out.println("CONSTANT");
         break;
      case 2 :
        image.append(jjstrLiteralImages[2]);
        lengthOfMatch = jjstrLiteralImages[2].length();
                   System.out.println("TRUE");
         break;
      case 3 :
        image.append(jjstrLiteralImages[3]);
        lengthOfMatch = jjstrLiteralImages[3].length();
                     System.out.println("FALSE");
         break;
      case 4 :
        image.append(jjstrLiteralImages[4]);
        lengthOfMatch = jjstrLiteralImages[4].length();
                           System.out.println("CONSTR");
         break;
      case 5 :
        image.append(jjstrLiteralImages[5]);
        lengthOfMatch = jjstrLiteralImages[5].length();
                    System.out.println("THIS");
         break;
      case 6 :
        image.append(jjstrLiteralImages[6]);
        lengthOfMatch = jjstrLiteralImages[6].length();
                       System.out.println("FUNCTION");
         break;
      case 7 :
        image.append(jjstrLiteralImages[7]);
        lengthOfMatch = jjstrLiteralImages[7].length();
                       System.out.println("RETURN");
         break;
      case 8 :
        image.append(jjstrLiteralImages[8]);
        lengthOfMatch = jjstrLiteralImages[8].length();
                   System.out.println("READ");
         break;
      case 9 :
        image.append(jjstrLiteralImages[9]);
        lengthOfMatch = jjstrLiteralImages[9].length();
                     System.out.println("WRITE");
         break;
      case 10 :
        image.append(jjstrLiteralImages[10]);
        lengthOfMatch = jjstrLiteralImages[10].length();
                     System.out.println("CLASS");
         break;
      case 11 :
        image.append(jjstrLiteralImages[11]);
        lengthOfMatch = jjstrLiteralImages[11].length();
               System.out.println("IF");
         break;
      case 12 :
        image.append(jjstrLiteralImages[12]);
        lengthOfMatch = jjstrLiteralImages[12].length();
                   System.out.println("THEN");
         break;
      case 13 :
        image.append(jjstrLiteralImages[13]);
        lengthOfMatch = jjstrLiteralImages[13].length();
                   System.out.println("ELSE");
         break;
      case 14 :
        image.append(jjstrLiteralImages[14]);
        lengthOfMatch = jjstrLiteralImages[14].length();
                        System.out.println("WHILE");
         break;
      case 15 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                       System.out.println("INT");
         break;
      case 16 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                            System.out.println("ID");
         break;
      case 17 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                   System.out.println("VARID");
         break;
      case 18 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                    System.out.println("COMMA");
         break;
      case 19 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                  System.out.println("ADD");
         break;
      case 20 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                              System.out.println("ADDASSIGN");
         break;
      case 21 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                              System.out.println("SUBASSIGN");
         break;
      case 22 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                System.out.println("MULASSIGN");
         break;
      case 23 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                       System.out.println("INC");
         break;
      case 24 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                  System.out.println("SUB");
         break;
      case 25 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                       System.out.println("DEC");
         break;
      case 26 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                  System.out.println("MUL");
         break;
      case 27 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                       System.out.println("POW");
         break;
      case 28 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                  System.out.println("DIV");
         break;
      case 29 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                  System.out.println("MOD");
         break;
      case 30 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                  System.out.println("LCB");
         break;
      case 31 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                  System.out.println("RCB");
         break;
      case 32 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                  System.out.println("LBR");
         break;
      case 33 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                  System.out.println("RBR");
         break;
      case 34 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                 System.out.println("EQ");
         break;
      case 35 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                  System.out.println("NOT");
         break;
      case 36 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                       System.out.println("NEQ");
         break;
      case 37 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                 System.out.println("GT");
         break;
      case 38 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                 System.out.println("LT");
         break;
      case 39 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                       System.out.println("GOE");
         break;
      case 40 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                       System.out.println("LOE");
         break;
      case 41 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                         System.out.println("ARROW");
         break;
      case 42 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                              System.out.println("COMPARISON");
         break;
      case 43 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                       System.out.println("AND");
         break;
      case 44 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                      System.out.println("OR");
         break;
      case 45 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                 System.out.println("SC");
         break;
      case 46 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                            System.out.println("STRLIT");
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public LexerTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public LexerTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 49; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0x7fffffffffffL, 
};
static final long[] jjtoSkip = {
   0x1f800000000000L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[49];
    private final int[] jjstateSet = new int[2 * 49];

    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    
    protected char curChar;
}
