options{
  STATIC = false;
  JDK_VERSION = "1.5";
}
PARSER_BEGIN(Lexer)
    import java.util.List;
    import java.util.ArrayList;
    import java.io.FileNotFoundException;
	public class Lexer{
	    public static void main(String[] args)throws ParseException{
	        try{
                Lexer lexer = new Lexer(new java.io.FileInputStream(args[0]));
                SimpleNode root = lexer.program();
                root.dump("");
	        }catch(java.io.FileNotFoundException e){
	            System.out.println("Parser: the file"+args[0]+"was not found");
	        }
	    }
		 /*public static void main(java.lang.String[] args) throws ParseException,TokenMgrError {
			Lexer lexer;
			System.out.println("Lexical analyser is now trying to read file..");
			if(args.length == 1){
			    System.out.println("Lexer is trying to read file: "+args[0]+"...");
			    try{
                    lexer = new Lexer(new java.io.FileInputStream(args[0]));
                    System.out.println("Starting to parse..");
                    for(Token token : tokenize(lexer)){
                        String name = LexerConstants.tokenImage[token.kind];
                        //String name = token.image;
                        System.out.println(token.beginLine +  ":" + name + "=>"+token.image);
                    }
                    System.out.println("Input was read.");
			    }catch(java.io.FileNotFoundException e){
                    System.out.println("Lexer: the file"+args[0]+"was not found..");
			        return;
			    }
			}
		}
		public static List<Token> tokenize (Lexer lexer) throws FileNotFoundException{
		    List<Token> tokens = new ArrayList<Token>();
		    Token token = lexer.getNextToken();
		    while(token.kind != LexerConstants.EOF){
		        tokens.add(token);
		        token = lexer.getNextToken();
		    }
		    return tokens;
		}*/
}PARSER_END(Lexer)

TOKEN:{

   <CONST: "const">
  | <TRUE: "true">
  | <FALSE: "false">
  | <CONSTR:  "construct">
  | <THIS:  "this">
  | <FUNC: "function">
  | <RETURN: "return">
  | <READ: "read">
  | <WRITE: "write">
  | <CLASS: "class">
  | <PUBLIC: "public">
  | <PRIVATE: "private">
  | <IF: "if">
  | <THEN: "then">
  | <ELSE: "else">
  | <WHILE: "asLongAs">
  | <INT:(["0"-"9"])+>
  | <ID: (["a"-"z","A"-"Z","0"-"9","_"])+ >
  | <VARID:("$")(["a"-"z","A"-"Z","0"-"9","_"])+ >
  | <COMMA:([","])>
  | <ADD:(["+"])>
  | <ADDASSIGN: (["+"]["="])>
  | <SUBASSIGN: (["-"]["="])>
  | <MULASSIGN: (["*"])(["="])>
  | <POWASSIGN: (["*"]["*"]["="])>
  | <DIVASSIGN: (["/"])(["="])>
  | <INC:(["+"]["+"])>
  | <SUB:(["-"])>
  | <DEC:(["-"]["-"])>
  | <MUL:(["*"])>
  | <POW:(["*"]["*"])>
  | <DIV:(["/"])>
  | <MOD:(["%"])>
  | <LCB:(["("])>
  | <RCB:([")"])>
  | <LBR:(["{"])>
  | <RBR:(["}"])>
  | <EQ:(["="])>
  | <NOT:(["!"])>
  | <NEQ:(["!"]["="])>
  | <GT:([">"])>
  | <LT:(["<"])>
  | <GOE:([">"]["="])>
  | <LOE:(["<"]["="])>
  | <ARROW:(["-"][">"])>
  | <COMPARISON:(["="]["="])>
  | <AND:(["&"]["&"])>
  | <OR:(["|"]["|"])>
  | <SC:([";"])>
  | <STRLIT: "\"" (~["\"", "\\"] | "\\\"" | "\\\\")* "\"" >
}

SKIP:{
  " "
  | "\t"
  | "\n"
  | "\r"
  |< "//" (~["\r", "\n"])* >
  |<"/*" (~["*"])* "*" (~["*","/"] (~["*"])* "*" | "*")* "/">
}

SimpleNode program()#program:{}
{
    classDeclaration()
}
void classDeclaration()#classDeclaration:{}
{
    <CLASS>id()<LBR>declarationList()<RBR>
}
void id()#ID:{Token t;}{
    t = <ID> {jjtThis.value = t.image;}
}
void declarationList()#declarationlist:{}
{
    LOOKAHEAD(3)declaration() |LOOKAHEAD(3) (<COMMA> declaration())*
}
void declaration()#declaration:{}
{
    LOOKAHEAD(2)varDeclaration() |LOOKAHEAD(2) funDeclaration() |LOOKAHEAD(2) constructor()
}
void varDeclaration()#vardeclaration:{}
{
    ((accessMod())? (constant())? (LOOKAHEAD(3) varDeclarationList()|(varAssignList())<SC>) )
}
void accessMod()#accessMod:{}
{
    <PRIVATE> | <PUBLIC>
}
void constant()#constant:{}
{
    <CONST>
}
void varDeclarationList()#varDecList:{}
{
    LOOKAHEAD(2)varID()|(LOOKAHEAD(2)<COMMA>varID())*
}
void varID()#varID:{}
{
    <VARID>
}
void varAssignList()#varAssignList:{}
{
   (<VARID> <EQ> value())|((<COMMA>varID())*<EQ>value())
}
void value()#value:{}
{
    bool()|integer()|string()
}
void bool()#bool:{}
{
    <TRUE>|<FALSE>
}
void integer()#integer:{}
{
    <INT>
}
void string()#string:{}
{
    <STRLIT>
}
void funDeclaration()#function:{}
{
    ((accessMod())? <FUNC><ID><LCB>(params())<RCB>statement())
}
void constructor()#construct:{}
{
    ((accessMod())?<CONSTR><ID><LCB>params()<RCB>constrStmt())
}
void constrStmt()#constrStmt:{}
{
    <THIS><ARROW><ID><EQ><ID><SC>
}
void params()#parameters:{}
{
    varID() | ((<COMMA>varID())*)
}
void statement()#statement:{}
{
    expressionStmt() | returnStmt() | iterationStmt() | compoundStmt() | ifStmt()
}
void expressionStmt()#expression:{}
{
    expression()<SC>
}
void returnStmt()#returnStmt:{}
{
    <RETURN>(expression())?<SC>
}
void iterationStmt()#iteration:{}
{
    <WHILE><LCB>expression()<RCB>statement()
}
void compoundStmt()#cmpdStmt:{}
{
    <LBR>(statement())*<RBR>
}
void ifStmt()#ifStmt:{}
{
    LOOKAHEAD(3)<IF><LCB>expression()<RCB> <THEN> statement() | <IF><LCB>expression()<RCB> <THEN> statement() [LOOKAHEAD(1) <ELSE> <THEN> statement()]
}
void expression()#expression:{}
{
    LOOKAHEAD(3)(mutable() binaryop() expression())
    | LOOKAHEAD(3) (mutable() sumop() term())
    | LOOKAHEAD(3) (mutable() mulop() term())
    | LOOKAHEAD(3) (mutable() eqAssign() expression())
    | LOOKAHEAD(3) (incdec())
    | LOOKAHEAD(3) immutable()
    | LOOKAHEAD(3) io()
}
void mutable()#mutable:{}
{
    <VARID> | <LCB>expression()<RCB>
}
void binaryop()#binaryOp:{}{
    <LOE>
    | <LT>
    | <GT>
    | <GOE>
    | <COMPARISON>
    | <NEQ>
    | <NOT>
    | <OR>
    | <AND>
}
void sumop()#sumOp:{}
{
    <ADD> | <SUB>
}
void mulop()#mulOp:{}
{
    <MUL>
    | <DIV>
    | <MOD>
    | <POW>
}
void term()#term:{}
{
    <VARID> | <ID> | <INT> | <STRLIT>
}
void eqAssign()#assignOp:{}
{
     <EQ> expression()
    | <ADDASSIGN> expression()
    | <SUBASSIGN> expression()
    | <MULASSIGN> expression()
    | <DIVASSIGN> expression()
    | <POWASSIGN> expression()
}
void incdec()#incdecOp:{}
{
    LOOKAHEAD(3)mutable()<INC> |LOOKAHEAD(3) mutable()<DEC>
}
void immutable()#immutable:{}
{
    call() | varID()
}
void io()#IO:{}
{
    read() | write()
}
void read()#input:{}
{
    <READ><LCB><RCB>
}
void write()#output:{}
{
    <WRITE><LCB>params()<RCB>
}
void call()#funcCall:{}
{
    <ID><LCB>arguments()<RCB>
}
void arguments()#arguments:{}
{
    (expression() | ((<COMMA>expression())*))
}