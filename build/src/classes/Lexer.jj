/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Lexer.jj */
/*@egen*/options{
  STATIC = false;
  JDK_VERSION = "1.5";
}
PARSER_BEGIN(Lexer)
    import java.util.List;
    import java.util.ArrayList;
    import java.io.FileNotFoundException;
	public class Lexer/*@bgen(jjtree)*/implements LexerTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected JJTLexerState jjtree = new JJTLexerState();

/*@egen*/
	    public static void main(String[] args)throws ParseException{
	        Lexer lexer = new Lexer(new java.io.FileInputStream(args[0]));
	        SimpleNode root = lexer.program();
	        root.dump("");
	    }
		 /*public static void main(java.lang.String[] args) throws ParseException,TokenMgrError {
			Lexer lexer;
			System.out.println("Lexical analyser is now trying to read file..");
			if(args.length == 1){
			    System.out.println("Lexer is trying to read file: "+args[0]+"...");
			    try{
                    lexer = new Lexer(new java.io.FileInputStream(args[0]));
                    System.out.println("Starting to parse..");
                    for(Token token : tokenize(lexer)){
                        String name = LexerConstants.tokenImage[token.kind];
                        //String name = token.image;
                        System.out.println(token.beginLine +  ":" + name + "=>"+token.image);
                    }
                    System.out.println("Input was read.");
			    }catch(java.io.FileNotFoundException e){
                    System.out.println("Lexer: the file"+args[0]+"was not found..");
			        return;
			    }
			}
		}
		public static List<Token> tokenize (Lexer lexer) throws FileNotFoundException{
		    List<Token> tokens = new ArrayList<Token>();
		    Token token = lexer.getNextToken();
		    while(token.kind != LexerConstants.EOF){
		        tokens.add(token);
		        token = lexer.getNextToken();
		    }
		    return tokens;
		}*/
}PARSER_END(Lexer)

TOKEN:{

   <CONST: "const">
  | <TRUE: "true">
  | <FALSE: "false">
  | <CONSTR:  "construct">
  | <THIS:  "this">
  | <FUNC: "function">
  | <RETURN: "return">
  | <READ: "read">
  | <WRITE: "write">
  | <CLASS: "class">
  | <PUBLIC: "public">
  | <PRIVATE: "private">
  | <IF: "if">
  | <THEN: "then">
  | <ELSE: "else">
  | <WHILE: "asLongAs">
  | <INT:(["0"-"9"])+>
  | <ID: (["a"-"z","A"-"Z","0"-"9","_"])+ >
  | <VARID:("$")(["a"-"z","A"-"Z","0"-"9","_"])+ >
  | <COMMA:([","])>
  | <ADD:(["+"])>
  | <ADDASSIGN: (["+"]["="])>
  | <SUBASSIGN: (["-"]["="])>
  | <MULASSIGN: (["*"])(["="])>
  | <POWASSIGN: (["*"]["*"]["="])>
  | <DIVASSIGN: (["/"])(["="])>
  | <INC:(["+"]["+"])>
  | <SUB:(["-"])>
  | <DEC:(["-"]["-"])>
  | <MUL:(["*"])>
  | <POW:(["*"]["*"])>
  | <DIV:(["/"])>
  | <MOD:(["%"])>
  | <LCB:(["("])>
  | <RCB:([")"])>
  | <LBR:(["{"])>
  | <RBR:(["}"])>
  | <EQ:(["="])>
  | <NOT:(["!"])>
  | <NEQ:(["!"]["="])>
  | <GT:([">"])>
  | <LT:(["<"])>
  | <GOE:([">"]["="])>
  | <LOE:(["<"]["="])>
  | <ARROW:(["-"][">"])>
  | <COMPARISON:(["="]["="])>
  | <AND:(["&"]["&"])>
  | <OR:(["|"]["|"])>
  | <SC:([";"])>
  | <STRLIT: "\"" (~["\"", "\\"] | "\\\"" | "\\\\")* "\"" >
}

SKIP:{
  " "
  | "\t"
  | "\n"
  | "\r"
  |< "//" (~["\r", "\n"])* >
  |<"/*" (~["*"])* "*" (~["*","/"] (~["*"])* "*" | "*")* "/">
}

SimpleNode program()        :{/*@bgen(jjtree) program */
  SimpleNode jjtn000 = new SimpleNode(this, JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) program */
    try {
/*@egen*/
    classDeclaration()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void classDeclaration()                 :{/*@bgen(jjtree) classDeclaration */
  SimpleNode jjtn000 = new SimpleNode(this, JJTCLASSDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) classDeclaration */
    try {
/*@egen*/
    <CLASS>id()<LBR>declarationList()<RBR>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void id()   :{/*@bgen(jjtree) ID */
              SimpleNode jjtn000 = new SimpleNode(this, JJTID);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) ID */
    try {
/*@egen*/
    t = <ID>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ {jjThis.value = t.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void declarationList()                :{/*@bgen(jjtree) declarationlist */
  SimpleNode jjtn000 = new SimpleNode(this, JJTDECLARATIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) declarationlist */
    try {
/*@egen*/
    (declaration() (<COMMA> declaration())*)/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void declaration()            :{/*@bgen(jjtree) declaration */
  SimpleNode jjtn000 = new SimpleNode(this, JJTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) declaration */
    try {
/*@egen*/
    varDeclaration() | funDeclaration() | constructor()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void varDeclaration()               :{/*@bgen(jjtree) vardeclaration */
  SimpleNode jjtn000 = new SimpleNode(this, JJTVARDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) vardeclaration */
    try {
/*@egen*/
    ((accessMod())? (constant())? (varDeclarationList()|(varAssignList())<SC>) )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void accessMod()          :{/*@bgen(jjtree) accessMod */
  SimpleNode jjtn000 = new SimpleNode(this, JJTACCESSMOD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) accessMod */
    try {
/*@egen*/
    <PRIVATE> | <PUBLIC>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void constant()         :{/*@bgen(jjtree) constant */
  SimpleNode jjtn000 = new SimpleNode(this, JJTCONSTANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) constant */
    try {
/*@egen*/
    <CONST>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void varDeclarationList()           :{/*@bgen(jjtree) varDecList */
  SimpleNode jjtn000 = new SimpleNode(this, JJTVARDECLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) varDecList */
    try {
/*@egen*/
    varID()|((<COMMA>)varID())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void varID()      :{/*@bgen(jjtree) varID */
  SimpleNode jjtn000 = new SimpleNode(this, JJTVARID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) varID */
    try {
/*@egen*/
    <VARID>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void varAssignList()              :{/*@bgen(jjtree) varAssignList */
  SimpleNode jjtn000 = new SimpleNode(this, JJTVARASSIGNLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) varAssignList */
   try {
/*@egen*/
   (<VARID> <EQ> value())|((<COMMA>varID())*<EQ>value())/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}
void value()      :{/*@bgen(jjtree) value */
  SimpleNode jjtn000 = new SimpleNode(this, JJTVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) value */
    try {
/*@egen*/
    bool()|integer()|string()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void bool()     :{/*@bgen(jjtree) bool */
  SimpleNode jjtn000 = new SimpleNode(this, JJTBOOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) bool */
    try {
/*@egen*/
    <TRUE>|<FALSE>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void integer()        :{/*@bgen(jjtree) integer */
  SimpleNode jjtn000 = new SimpleNode(this, JJTINTEGER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) integer */
    try {
/*@egen*/
    <INT>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void string()       :{/*@bgen(jjtree) string */
  SimpleNode jjtn000 = new SimpleNode(this, JJTSTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) string */
    try {
/*@egen*/
    <STRLIT>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void funDeclaration()         :{/*@bgen(jjtree) function */
  SimpleNode jjtn000 = new SimpleNode(this, JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) function */
    try {
/*@egen*/
    ((accessMod())? <FUNC><ID><LCB>params()<RCB>statement())/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void constructor()          :{/*@bgen(jjtree) construct */
  SimpleNode jjtn000 = new SimpleNode(this, JJTCONSTRUCT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) construct */
    try {
/*@egen*/
    ((accessMod())?<CONSTR><ID><LCB>params()<RCB>constrStmt())/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void constrStmt()           :{/*@bgen(jjtree) constrStmt */
  SimpleNode jjtn000 = new SimpleNode(this, JJTCONSTRSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) constrStmt */
    try {
/*@egen*/
    <THIS><ARROW><ID><EQ><ID><SC>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void params()           :{/*@bgen(jjtree) parameters */
  SimpleNode jjtn000 = new SimpleNode(this, JJTPARAMETERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) parameters */
    try {
/*@egen*/
    (varID() | ((<COMMA>varID())*))?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void statement()          :{/*@bgen(jjtree) statement */
  SimpleNode jjtn000 = new SimpleNode(this, JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) statement */
    try {
/*@egen*/
    expressionStmt() | returnStmt() | iterationStmt() | compoundStmt() | ifStmt()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void expressionStmt()           :{/*@bgen(jjtree) expression */
  SimpleNode jjtn000 = new SimpleNode(this, JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) expression */
    try {
/*@egen*/
    expression()<SC>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void returnStmt()           :{/*@bgen(jjtree) returnStmt */
  SimpleNode jjtn000 = new SimpleNode(this, JJTRETURNSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) returnStmt */
    try {
/*@egen*/
    <RETURN>(expression())?<SC>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void iterationStmt()          :{/*@bgen(jjtree) iteration */
  SimpleNode jjtn000 = new SimpleNode(this, JJTITERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) iteration */
    try {
/*@egen*/
    <WHILE><LCB>expression()<RCB>statement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void compoundStmt()         :{/*@bgen(jjtree) cmpdStmt */
  SimpleNode jjtn000 = new SimpleNode(this, JJTCMPDSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) cmpdStmt */
    try {
/*@egen*/
    <LBR>(statement())*<RBR>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void ifStmt()       :{/*@bgen(jjtree) ifStmt */
  SimpleNode jjtn000 = new SimpleNode(this, JJTIFSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ifStmt */
    try {
/*@egen*/
    <IF><LCB>expression()<RCB> <THEN> statement() | <IF><LCB>expression()<RCB> <THEN> statement() [LOOKAHEAD(1) <ELSE> <THEN> statement()]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void expression()           :{/*@bgen(jjtree) expression */
  SimpleNode jjtn000 = new SimpleNode(this, JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) expression */
    try {
/*@egen*/
    mutable()
    | (mutable() binaryop() expression())
    | (mutable() sumop() term())
    | (mutable() mulop() term())
    | (mutable() eqAssign() expression())
    | (incdec())
    | immutable()
    | io()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void mutable()        :{/*@bgen(jjtree) mutable */
  SimpleNode jjtn000 = new SimpleNode(this, JJTMUTABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) mutable */
    try {
/*@egen*/
    <VARID> | expression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void binaryop()         :{/*@bgen(jjtree) binaryOp */
  SimpleNode jjtn000 = new SimpleNode(this, JJTBINARYOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) binaryOp */
    try {
/*@egen*/
    <LOE>
    | <LT>
    | <GT>
    | <GOE>
    | <COMPARISON>
    | <NEQ>
    | <NOT>
    | <OR>
    | <AND>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void sumop()      :{/*@bgen(jjtree) sumOp */
  SimpleNode jjtn000 = new SimpleNode(this, JJTSUMOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) sumOp */
    try {
/*@egen*/
    <ADD> | <SUB>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void mulop()      :{/*@bgen(jjtree) mulOp */
  SimpleNode jjtn000 = new SimpleNode(this, JJTMULOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) mulOp */
    try {
/*@egen*/
    <MUL>
    | <DIV>
    | <MOD>
    | <POW>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void term()     :{/*@bgen(jjtree) term */
  SimpleNode jjtn000 = new SimpleNode(this, JJTTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) term */
    try {
/*@egen*/
    <VARID> | <ID> | <INT> | <STRLIT>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void eqAssign()         :{/*@bgen(jjtree) assignOp */
  SimpleNode jjtn000 = new SimpleNode(this, JJTASSIGNOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) assignOp */
    try {
/*@egen*/
    mutable() <EQ> expression()
    | mutable() <ADDASSIGN> expression()
    | mutable() <SUBASSIGN> expression()
    | mutable() <MULASSIGN> expression()
    | mutable() <DIVASSIGN> expression()
    | mutable() <POWASSIGN> expression()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void incdec()         :{/*@bgen(jjtree) incdecOp */
  SimpleNode jjtn000 = new SimpleNode(this, JJTINCDECOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) incdecOp */
    try {
/*@egen*/
    mutable()<INC> | mutable()<DEC>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void immutable()          :{/*@bgen(jjtree) immutable */
  SimpleNode jjtn000 = new SimpleNode(this, JJTIMMUTABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) immutable */
    try {
/*@egen*/
    call() | varID()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void io()   :{/*@bgen(jjtree) IO */
  SimpleNode jjtn000 = new SimpleNode(this, JJTIO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IO */
    try {
/*@egen*/
    read() | write()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void read()      :{/*@bgen(jjtree) input */
  SimpleNode jjtn000 = new SimpleNode(this, JJTINPUT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) input */
    try {
/*@egen*/
    <READ><LCB><RCB>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void write()       :{/*@bgen(jjtree) output */
  SimpleNode jjtn000 = new SimpleNode(this, JJTOUTPUT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) output */
    try {
/*@egen*/
    <WRITE><LCB>params()<RCB>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void call()         :{/*@bgen(jjtree) funcCall */
  SimpleNode jjtn000 = new SimpleNode(this, JJTFUNCCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) funcCall */
    try {
/*@egen*/
    <ID><LCB>arguments()<RCB>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
void arguments()          :{/*@bgen(jjtree) arguments */
  SimpleNode jjtn000 = new SimpleNode(this, JJTARGUMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) arguments */
    try {
/*@egen*/
    (expression() | ((<COMMA>expression())*))?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}